This File Contains

    1. Java Terminology
    2. Features of Java
    3. JDK,JVM,JRE
    4. Java Basic Syntax
    5. Hello World Program
    6. Data Types
    7. indentifiers
    8. Operators
    9. Variables
    10. Wrapper Class
    11. Input/Output
    12. Flow Control
    14.Constructors, this reference
    15. Access Modifiers
    16. Memory Allocation
    17. Packages in java
    13. OOPS
    14. Arrays
    15. Strings
    16. Exception Handling
    17. Multi Threading
    18. Synchronization
    19. Serialization
    20. File Handling
    21. Java IO
    22. Java Networking
    23. JDBC

                                                          JAVA
                                                    


Java Terminology

Before learning Java, one must be familiar with these common terms of Java.

1.  Java Virtual Machine(JVM):  This is generally referred to as JVM. There are three execution phases of a program. They are written, compile 
    and run the program.Writing a program is done by a java programmer like you and me.The compilation is done by the JAVAC compiler which is a 
    primary Java compiler included in the Java development kit (JDK). It takes the Java program as input and generates bytecode as output.
    In the Running phase of a program, JVM executes the bytecode generated by the compiler.Now, we understood that the function of Java Virtual
    Machine is to execute the bytecode produced by the compiler. Every Operating System has a different JVM but the output they produce after the 
    execution of bytecode is the same across all the operating systems. This is why Java is known as a platform-independent language.

2. Bytecode in the Development Process:  As discussed, the Javac compiler of JDK compiles the java source code into bytecode so that it can be 
    executed by JVM. It is saved as .class file by the compiler. To view the bytecode, a disassembler like javap can be used.

3. Java Development Kit(JDK): While we were using the term JDK when we learn about bytecode and JVM. So, as the name suggests, it is a complete 
    Java development kit that includes everything including compiler, Java Runtime Environment (JRE), java debuggers, java docs, etc.
    For the program to execute in java, we need to install JDK on our computer in order to create, compile and run the java program.

4. Java Runtime Environment (JRE): JDK includes JRE. JRE installation on our computers allows the java program to run, however,
    we cannot compile it. JRE includes a browser, JVM, applet support, and plugins. For running the java program, a computer needs JRE.

5. Garbage Collector: In Java, programmers can’t delete the objects. To delete or recollect that memory JVM has a program called Garbage Collector. 
    Garbage Collectors can recollect the objects that are not referenced. So Java makes the life of a programmer easy by handling memory management.
    However, programmers should be careful about their code whether they are using objects that have been used for a long time. Because Garbage 
    cannot recover the memory of objects being referenced.


Features of Java
    
1. Platform Independent: Compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. This bytecode
    can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and
    vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of the bytecode. 
    That is why we call java a platform-independent language.

2. Object-Oriented Programming Language: Organizing the program in the terms of a collection of objects is a way of object-oriented programming,
    each of which represents an instance of the class.
    
    The four main concepts of Object-Oriented programming are:

    Abstraction
    Encapsulation
    Inheritance
    Polymorphism
    
3. Simple:  Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, 
    and Explicit memory allocation. 

4. Robust:  Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors 
    as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming
    language.

5. Secure:  In java, we don’t have pointers, so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound Exception if we try to do so.
    That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. Also, java programs run in an
    environment that is independent of the os(operating system) environment which makes java programs more secure.

6. Distributed:  We can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans
    are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected
    to each other through an internet connection.

7. Multithreading:  Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts of a program for
    maximum utilization of the CPU.

8. Portable:  As we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its 
    platform-independent bytecode can be taken to any platform for execution makes java portable.

9. High Performance: Java architecture is defined in such a way that it reduces overhead during the runtime and at some times java uses Just In 
    Time (JIT) compiler where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications 
    to execute faster.




JDK(Java Development Kit)

The Java Development Kit (JDK) is a cross-platformed software development environment that offers a collection of tools and libraries necessary 
for developing Java-based software applications and applets. It is a core package used in Java, along with the JVM (Java Virtual Machine) 
and the JRE (Java Runtime Environment). 

Mostly many get confused with JRE and JDK, if you are only interested in running Java programs on your machine then you can easily do it 
using Java Runtime Environment. However, if you would like to develop a Java-based software application then along with JRE you may need 
some additional necessary tools, which is called JDK.

                                                JDK=JRE+Development Tools


JVM(Java Virtual Machine)  

A run-time engine to run Java applications. JVM is the one that actually calls the main method present in a Java code. JVM is a part of JRE
Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one system and can expect it to 
run on any other Java-enabled system without any adjustment. This is all possible because of JVM.

When we compile a .java file, .class files(contains byte-code) with the same class names present in .java file are generated by the Java compiler. 
This .class file goes into various steps when we run it. These steps together describe the whole JVM. 


                                            JRE = JVM+ set of libraries and other files


Java JIT Compiler

Bytecode is one of the most important features of java that aids in cross-platform execution. The way of converting bytecode to native
machine language for execution has a huge impact on its speed of it. These bytecodes have to be interpreted or compiled to proper machine
instructions depending on the instruction set architecture. Moreover, these can be directly executed if the instruction architecture is bytecode 
based.

Interpreting the bytecode affects the speed of execution. In order to improve performance, JIT compilers interact with the Java Virtual 
Machine (JVM) at run time and compile suitable bytecode sequences into native machine code. While using a JIT compiler, the hardware is able to 
execute the native code, as compared to having the JVM interpret the same sequence of bytecode repeatedly and incurring overhead for the
translation process. This subsequently leads to performance gains in the execution speed, unless the compiled methods are executed less frequently.


             At Compile Time                            At Run time
    
sourcecode.java -> Compiler -> ByteCode ->  JIT Compiler-> Native Machine code



Byte Code 

Byte code is an intermediate code between the source code and machine code. It is a low-level code that is the result of the compilation of a 
source code which is written in a high-level language. It is processed by a virtual machine like Java Virtual Machine (JVM).

Byte code is a non-runnable code after it is translated by an interpreter into machine code then it is understandable by the machine. 
It is compiled to run on JVM, any system having JVM can run it irrespective of their operating system. That’s why Java is platform-independent.
Byte code is referred to as a Portable code.

Machine Code:

Machine code is a set of instructions that is directly machine-understandable and it is processed by the Central Processing Unit (CPU).
Machine code is in binary (0’s and 1’s) format which is completely different from the byte code and source code. It is regarded as the most 
lowest-level representation of the source code. Machine code is obtained after compilation or interpretation. It is also called machine language.



JAVA Basic Syntax


CLASS AND OBJECT

A class in Java is a set of objects which shares common characteristics/ behavior and common properties/ attributes.
It is a user-defined blueprint or prototype from which objects are created.
For example, Student is a class while a particular student named Anunay is an object.

Declaration

access_modifier class <class_name>
{  
    data member;  
    method;  
    constructor;
    nested class;
}

How to Create an Object of a Class

Using new Keyword

It is most common and used way to create an object in Java

// creating object of class Test
Test t = new Test();



//This following code may be difficult to understand at this point just have a glance at how an object is created and called.

class Lamp {
  
  // stores the value for light
  // true if light is on
  // false if light is off
  boolean isOn;

  // method to turn on the light
  void turnOn() {
    isOn = true;
    System.out.println("Light on? " + isOn);

  }

  // method to turnoff the light
  void turnOff() {
    isOn = false;
    System.out.println("Light on? " + isOn);
  }
}

class Main {
  public static void main(String[] args) {

    // create objects led and halogen
    Lamp led = new Lamp();
    Lamp halogen = new Lamp();

    // turn on the light by
    // calling method turnOn()
    led.turnOn();

    // turn off the light by
    // calling method turnOff()
    halogen.turnOff();
  }
}


Naming Conventions in Java 
    
In java, it is good practice to name class, variables, and methods name as what they are actually supposed to do instead of naming them randomly. 
They must be followed while developing software in java for good maintenance and readability of code. Java uses CamelCase as a practice for
writing names of methods, variables, classes, packages, and constants. 
    
Camel’s case in java programming consists of compound words or phrases such that each word or abbreviation begins with a capital letter 
or first word with a lowercase letter, rest all with capital.

Type 1: Classes and Interfaces

Class names should be nouns, in mixed cases with the first letter of each internal word capitalized. Interfaces names should also be capitalized 
just like class names. Use whole words and must avoid acronyms and abbreviations.

Classes: class Student { }
         class Integer {}
         class Scanner {}
Interfaces : Runnable
             Remote
             Serializable 

Type 2: Methods 

Methods should be verbs, in mixed case with the first letter lowercase and with the first letter of each internal word capitalized.
    

Type 3: Variables

Variable names should be short yet meaningful. 

Variable names should not start with underscore _ or dollar sign $ characters, even though both are allowed.
One-character variable names should be avoided except for temporary variables.
Common names for temporary variables are i, j, k, m, and n for integers; c, d, and e for characters.


    
Java Hello World Program
    

    class HelloWorld {
    // Your program begins with a call to main().
    public static void main(String args[])
    {
        // Prints "Hello, World" 
        System.out.println("Hello, World");
    }
}


In the Java programming language, every application must contain a main method. The main function(method) is the entry point of your Java 
application, and it’s mandatory in a Java program. whose signature in Java is: 

public static void main(String[] args)
    
Explanation of the above syntax

public: So that JVM can execute the method from anywhere.
static: The main method is to be called without an object. The modifiers are public and static can be written in either order.
void: The main method doesn’t return anything.
String[]: The main method accepts a single argument, i.e., an array of elements of type String.
main(): Name configured in the JVM. The main method must be inside the class definition. The compiler executes the codes starting always from 
        the main function.


DATA TYPES

Data types in Java are of different sizes and values that can be stored in the variable that is made as per convenience and circumstances 
to cover up all test cases. Java has two categories in which data types are segregated 

Primitive Data Type: Boolean, char, int, short, byte, long, float, and double
Non-Primitive Data Type: String, Array, etc.

Boolean - 1 bit   
byte - 8 bits     
char - 16 bits    
short - 16 bits   
int - 32 bits    
long - 64 buts    
float - 32 bits
double - 64 bits



IDENTIFIERS
    

Rules For Defining Java Identifiers

There are certain rules for defining a valid Java identifier. These rules must be followed, otherwise, we get a compile-time error.
These rules are also valid for other languages like C, and C++. 

The only allowed characters for identifiers are all alphanumeric characters([A-Z],[a-z],[0-9]), ‘$‘(dollar sign) and ‘_‘ (underscore).
For example “geek@” is not a valid Java identifier as it contains a ‘@’ a special character.
Identifiers should not start with digits([0-9]). For example “123geeks” is not a valid Java identifier.
Java identifiers are case-sensitive.
There is no limit on the length of the identifier but it is advisable to use an optimum length of 4 – 15 letters only.
Reserved Words can’t be used as an identifier. For example “int while = 20;” is an invalid statement as a while is a reserved word. 
    
There are 53 reserved words in Java some of them are

abstract	continue	for	protected	transient
Assert	Default	Goto	public	Try
Boolean	Do	If	Static	throws
break	double	implements	strictfp	Package
byte	else	import	super	Private
case	enum	Interface	Short	switch
Catch	Extends	instanceof	return	void
Char	Final	Int	synchronized	volatile
class	finally	long	throw	Date
const	float	Native	This	while



Examples of valid identifiers : 

MyVariable
MYVARIABLE
myvariable
x
i
x1
i1
_myvariable
$myvariable
sum_of_array
geeks123

Examples of invalid identifiers : 

My Variable  // contains a space
123geeks   // Begins with a digit
a+c // plus sign is not an alphanumeric character
variable-2 // hyphen is not an alphanumeric character
sum_&_difference // ampersand is not an alphanumeric character



OPERATORS

1. Arthimetic Operators

    
These are used to perform simple arithmetic operations on primitive data types. 

* : Multiplication
/ : Division
% : Modulo- for remainder ex: 10%8 = 2
+ : Addition
– : Subtraction

2. Unary Operators
    

Unary operators need only one operand. They are used to increment, decrement, or negate a value. 

– : Unary minus, used for negating the values.
+ : Unary plus  It performs an automatic conversion to int when the type of its operand is the byte, char, or short. 
++ : Increment operator, used for incrementing the value by 1. There are two varieties of increment operators. 
Post-Increment: Value is first used for computing the result and then incremented.(a++)
Pre-Increment: Value is incremented first, and then the result is computed.(++a)
– –  : Decrement operator, used for decrementing the value by 1. There are two varieties of decrement operators. 
Post-decrement: Value is first used for computing the result and then decremented.(a--)
Pre-Decrement: The value is decremented first, and then the result is computed.(--a)
! : Logical not operator, used for inverting a boolean value. changing from false to true or vice versa

3. Assignment Operator

    
‘=’ Assignment operator is used to assign a value to any variable. It has right-to-left associativity, i.e. value given on the right-hand side of 
the operator is assigned to the variable on the left, and therefore right-hand side value must be declared before using it or should be a constant. 

The general format of the assignment operator is:

variable = value;

In many cases, the assignment operator can be combined with other operators to build a shorter version of the statement called a Compound Statement. For example, instead of a = a+5, we can write a += 5. 

+=, for adding the left operand with the right operand and then assigning it to the variable on the left.
-=, for subtracting the right operand from the left operand and then assigning it to the variable on the left.
*=, for multiplying the left operand with the right operand and then assigning it to the variable on the left.
/=, for dividing the left operand by the right operand and then assigning it to the variable on the left.
%=, for assigning the modulo of the left operand by the right operand and then assigning it to the variable on the left.

For example, instead of a = a+5, we can write a += 5. 

    
4. Relational Operators

These operators are used to check for relations like equality, greater than, and less than. They return boolean results after the comparison 
and are extensively used in looping statements as well as conditional if-else statements
Some of the relational operators are- 

==, Equal to returns true if the left-hand side is equal to the right-hand side.
!=, Not Equal to returns true if the left-hand side is not equal to the right-hand side.
<, less than: returns true if the left-hand side is less than the right-hand side.
<=, less than or equal to returns true if the left-hand side is less than or equal to the right-hand side.
>, Greater than: returns true if the left-hand side is greater than the right-hand side.
>=, Greater than or equal to returns true if the left-hand side is greater than or equal to the right-hand side.


    
5. Logical Operators

    
These operators are used to perform “logical AND” and “logical OR” operations, i.e., a function similar to AND gate and OR gate in digital
electronics. One thing to keep in mind is the second condition is not evaluated if the first one is false, i.e., it has a short-circuiting effect. 
Used extensively to test for several conditions for making a decision. Java also has “Logical NOT”, which returns true when the condition is false 
and vice-versa

Conditional operators are:

&&, Logical AND: returns true when both conditions are true.
||, Logical OR: returns true if at least one condition is true.
!, Logical NOT: returns true when a condition is false and vice-versa


6. Ternary operator

    
The ternary operator is a shorthand version of the if-else statement. It has three operands and hence the name Ternary.

The general format is:

condition ? if true : if false
The above statement means that if the condition evaluates to true, then execute the statements after the ‘?’ else execute the statements after
the ‘:’.  

Sample Code:

// Java program to illustrate
// max of three numbers using
// ternary operator.
public class operators {
    public static void main(String[] args)
    {
        int a = 20, b = 10, c = 30, result;

        // result holds max of three
        // numbers
        result
            = ((a > b) ? (a > c) ? a : c : (b > c) ? b : c);
        System.out.println("Max of three numbers = "
                           + result);
    }
}


7. Bitwise Operators

    
These operators are used to perform the manipulation of individual bits of a number. They can be used with any of the integer types.
They are used when performing update and query operations of the Binary indexed trees. 

&, Bitwise AND operator: returns bit by bit AND of input values.
|, Bitwise OR operator: returns bit by bit OR of input values.
^, Bitwise XOR operator: returns bit-by-bit XOR of input values.
~, Bitwise Complement Operator: This is a unary operator which returns the one’s complement representation of the input value, i.e.,
with all bits inverted.

Sample Code:

// Java Program to implement
// bitwise operators
import java.io.*;

// Driver class
class GFG {
    // main function
    public static void main(String[] args)
    {
        // Bitwise operators
        int d = 0b1010;
        int e = 0b1100;
        System.out.println("d & e: " + (d & e));  // output will be 8
        System.out.println("d | e: " + (d | e));  // output will be 14
        System.out.println("d ^ e: " + (d ^ e));  // output will be 6
        System.out.println("~d: " + (~d));        // output will be -11
        System.out.println("d << 2: " + (d << 2));  // output will be 40
        System.out.println("e >> 1: " + (e >> 1));   // output will be 40
        System.out.println("e >>> 1: " + (e >>> 1));  // output will be 6
    }
}


8. Shift Operators

    
These operators are used to shift the bits of a number left or right, thereby multiplying or dividing the number by two, respectively. 
They can be used when we have to multiply or divide a number by two. General format- 

                     number shift_op number_of_places_to_shift;

<<, Left shift operator: shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as multiplying the number with some power of two.
>>, Signed Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit depends on the sign of the initial number. 
>>>, Unsigned Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit is set to 0.


Variables
























All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument 
constructor, also called the default constructor. This default constructor calls the class parent’s no-argument constructoror the Object class 
constructor if the class has no other parent (as the Object class is the parent of all classes either directly or indirectly). 



