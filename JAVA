This File Contains

1. Java class and object
2. Naming Convention
3. 









CLASS AND OBJECT

A class in Java is a set of objects which shares common characteristics/ behavior and common properties/ attributes.
It is a user-defined blueprint or prototype from which objects are created.
For example, Student is a class while a particular student named Anunay is an object.

Declaration

access_modifier class <class_name>
{  
    data member;  
    method;  
    constructor;
    nested class;
}

How to Create an Object of a Class

Using new Keyword

It is most common and used way to create an object in Java

// creating object of class Test
Test t = new Test();



//This following code may be difficult to understand at this point just have a glance at how an object is created and called.

class Lamp {
  
  // stores the value for light
  // true if light is on
  // false if light is off
  boolean isOn;

  // method to turn on the light
  void turnOn() {
    isOn = true;
    System.out.println("Light on? " + isOn);

  }

  // method to turnoff the light
  void turnOff() {
    isOn = false;
    System.out.println("Light on? " + isOn);
  }
}

class Main {
  public static void main(String[] args) {

    // create objects led and halogen
    Lamp led = new Lamp();
    Lamp halogen = new Lamp();

    // turn on the light by
    // calling method turnOn()
    led.turnOn();

    // turn off the light by
    // calling method turnOff()
    halogen.turnOff();
  }
}

Naming Convention

Naming Conventions in Java 
    
In java, it is good practice to name class, variables, and methods name as what they are actually supposed to do instead of naming them randomly. 
Below are some naming conventions of the java programming language. They must be followed while developing software in java for good maintenance 
and readability of code. Java uses CamelCase as a practice for writing names of methods, variables, classes, packages, and constants. 
    
Camel’s case in java programming consists of compound words or phrases such that each word or abbreviation begins with a capital letter 
or first word with a lowercase letter, rest all with capital.

Type 1: Classes and Interfaces

Class names should be nouns, in mixed cases with the first letter of each internal word capitalized. Interfaces names should also be capitalized 
just like class names. Use whole words and must avoid acronyms and abbreviations.

Classes: class Student { }
         class Integer {}
         class Scanner {}
Interfaces : Runnable
             Remote
             Serializable 

Type 2: Methods 

Methods should be verbs, in mixed case with the first letter lowercase and with the first letter of each internal word capitalized.
    

Type 3: Variables

Variable names should be short yet meaningful. 

Variable names should not start with underscore _ or dollar sign $ characters, even though both are allowed.
One-character variable names should be avoided except for temporary variables.
Common names for temporary variables are i, j, k, m, and n for integers; c, d, and e for characters.
























All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument 
constructor, also called the default constructor. This default constructor calls the class parent’s no-argument constructoror the Object class 
constructor if the class has no other parent (as the Object class is the parent of all classes either directly or indirectly). 



